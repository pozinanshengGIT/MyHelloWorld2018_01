<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace:命名空间,作用是对sql语句进行隔离-->
<!-- 当有多个xxxMapper.xml映射文件的时候,通过namespace命名空间进行配置的sql语句的隔离-->
<!-- 例如用户,UserMapper.xml命名空间是test;       商品,ItemMapper.xml命名空间是itemTest -->
<!-- 用法: 用户,test.queryById                   商品, itemTest.queryById     -->
<!-- 命名空间test.queryById在Java代码中,操作数据库的时候使用,用来确认queryById方法要操作的是哪个sql语句,可以说是定位sql语句的双保险-->

<mapper namespace="com.itheima.mapper.UserMapper">

    <!-- 使用Mapper接口的动态代理开发,是现在的主流开发方式 -->
    <!-- 和原始的dao开发区别是  1,没有dao的实现类; 2,需要符合四个开发规范: -->
    <!-- 1,映射文件的namespace必须是Mapper接口的全限定名(带包名)-->
    <!-- 2,配置的id必须是接口的方法名 -->
    <!-- 3,配置的parameterType的类型必须是接口的方法参数类型-->
    <!-- 4,配置的resultType的类型必须是接口的方法返回值类型-->

<!-- 根据id 查询用户,原始的dao开发方式 -->
    <select id="queryUserById01" parameterType="int" resultType="com.itheima.pojo.User">
        SELECT * FROM USER WHERE id=#{id}
    </select>


    <delete id="deleteUserById" parameterType="int">

        DELETE FROM USER WHERE  id=#{id};
    </delete>

    <!-- 根据用户名模糊查询用户数据,使用pojo包装对象 -->
    <!-- username:就是指pojo的usres属性里面的username属性 -->
    <select id="queryUserByQueryVo" parameterType="QueryVo" resultType="user">
        SELECT * FROM user WHERE username LIKE #{user.username};
    </select>`
</mapper>